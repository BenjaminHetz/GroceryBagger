Authors: Tyler Egan, Ben Hetz
Project: P2-Constraint Satisfaction

Design:



Tested:
The most common thing we did to test was use print statements to show us the 
what had happened and what the state of the program and it's information was 
when it failed when running it against the example input provided in the 
write up. With this, we could see if items were being sorted the way we 
wanted them to, and if they were being added to bags the way we intended 
them to be. After we got the result to print what we wanted, we tested by 
created a few other input tests. One was a real-world example of products 
and size. The next was a semi-complex example with 26 items, with varying 
size and random constraints. The last was an example of an item that was 
too heavy to add. 


Test Results:
On Ben's Laptop:
************************************************************************
Average for GroceryTest1 Over 10 Trials
Stats:
	3 Bags
	7 Max Capacity
	5 Items
Normal: .0896s
Local: .0921s
Slow: .0908s


Average for GroceryTest2 Over 10 Trials
Stats:
	6 Bags
	8 Max Capacity
	10 Items
Normal: .1031s
Local: .1105s
Slow: .1037s


Average for GroceryTest3 Over 10 Trials
Stats:
	10 Bags
	15 Max Capacity
	26 Items
Normal: .1229s
Local: .1344s
Slow: .1229s


Average for GroceryTest4OW Over 10 Trials
NOTE: This file is guaranteed to fail by design so this is time to fail
Stats:
	3 Bags
	7 Max Capacity
	5 Items
Normal: .0921s
Local: .948s
Slow: .0907s
************************************************************************

General Experience: