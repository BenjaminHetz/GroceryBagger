Authors: Tyler Egan, Ben Hetz
Project: P2-Constraint Satisfaction

Design:
This program begins by taking in a text file and an optional argument. The 
text file contains the number of bags on the first line, the size of the bag 
on the second, and items with their constraints on each subsequent line. It 
then parses this information and stores it in an ArrayList of objects called 
GroceryItem. These objects hold an item's name, size, constraints, unique id, 
and weight. A BitSet used for comparing items is also stored in the 
GroceryItem, but it is only after all the item's have been created that a 
setConstraintBits() function can be called. It is each items unique id that 
determines which bit it is in the constraintBits. The next thing this program 
does is create another object called GroceryBag. This object stores an 
ArrayList of GroceryItems (those that have been added to the bag), another 
BitSet that says what items can go in it, the number of items in it, the weight 
of all the items in it, and max weight it can hold, and the total number of items 
that need bagged. Once the items and bags have been initialized, the program 
fills the bags based on the optional argument that is, or isn't, passed. If 
the user does not pass any argument, this program will use LCV to get a 
preliminary ordering of the items. MRV is then used for the overall order of the
items with the order from the LCV being used when items have the same MRV value. 
After the items are ordered based on priority of bagging the items, a depth first
search is used to fill the bags. Arc consistency is also used after each item is 
added to ensure that the path currently traveled in the depth first search is not 
a waste of time. If the search succeeds, each bag's content is printed out. If 
it fails, then the word failure is printed out. If the user passes the argument 
-slow, then the same thing occurs, except without arc consistency. The last thing
that can occur is the user passing an argument of -local.
If the user passes "-local" to the program, the program attempts to bag the items
using a local search method. This is done by generating a random mapping of items
to bags, disregarding constraints, and then changing one unsatisfactory item at a
time until the items are in an acceptable arrangement. To do this, we used a Map
data structure to hold which bag each item would go to. In the Min-Conflicts
function, an attempt would be made to put each item into its respective bag.
If the item failed to be added for whatever reason, then we know at least one of
the items currently mapped to that bag would need to be changed, and so they
would all be removed and placed into a list of items that were eligible for change.
If all items in that bag were added successfully, then those items would not be
eligible for change. Initially, we only added the item that failed to bag to the
list to change, but this put us into scenarios where a solution could not be reached.
For example, in our GroceryTest1 file, if initially bread and rolls were placed into
different bags, they would successfully be placed since they are first, and anything
else that we attempted to add to those bags would fail. Any valid solution for that
particular problem needs to have both rolls and bread into one bag. Thus, it was
decided that an item failing to add did not mean that item failed, but that the
entire bag failed. After we made this change, it was only a matter of time before
a solution could be found. Local search has to complete in a certain number of
steps. In this case, we chose an appropriate number of steps would be the
number of items to bag multiplied by the number of bags we could use.
Additionally, in our main method we ran the local search 5 times or until it
succeeded, whichever came first. All in all, local search was slower than
DFS with and without arc consistency on average, though in some cases it
did run faster (obviously if a correct mapping is found at random the
first time then the solution is found extremely quickly, though the odds
of this are very very low).


Tested:
The most common thing we did to test was use print statements to show us
what had happened and what the state of the program and it's information was 
when it failed when running it against the example input provided in the 
write up. With this, we could see if items were being sorted the way we 
wanted them to, and if they were being added to bags the way we intended 
them to be. After we got the result to print what we wanted, we tested by 
creating a few other input tests. One was a real-world example of products
and size. The next was a semi-complex example with 26 items, with varying 
size and random constraints. The last was an example of an item that was 
too heavy to add, which must fail every time.


Test Results:
On Ben's Laptop:
************************************************************************
Average for GroceryTest1 Over 10 Trials
Stats:
	3 Bags
	7 Max Capacity
	5 Items
Normal: .0896s
Local: .0921s
Slow: .0908s


Average for GroceryTest2 Over 10 Trials
Stats:
	6 Bags
	8 Max Capacity
	10 Items
Normal: .1031s
Local: .1105s
Slow: .1037s


Average for GroceryTest3 Over 10 Trials
Stats:
	10 Bags
	15 Max Capacity
	26 Items
Normal: .1229s
Local: .1344s
Slow: .1229s


Average for GroceryTest4OW Over 10 Trials
NOTE: This file is guaranteed to fail by design so this is time to fail
Stats:
	3 Bags
	7 Max Capacity
	5 Items
Normal: .0921s
Local: .948s
Slow: .0907s
************************************************************************

General Experience:
(Ben)
My main responsibility was local search. Overall my experience was pretty
positive. I am not as confident in the concepts we are learning in this
course so I'm pretty happy for the fact that I got my local search working
effectively. We were able to use version control in an actually effective
fashion so that worked out pretty well for us. It was really satisfying
when I was finally able to see the local search complete with a successful
mapping of items to bags. I went through probably 4 different iterations
of that method and leaned on Tyler a lot to bounce ideas off of. I was
also responsible for creating our bagit script and the timing script for
the project. Although I had to manually get the averages for runtimes
from the timing script, I think it could be modified to generate those
itself which would be neat. As of now I have only timed the code on my
laptop, but the results are pretty consistent.
(Tyler)
